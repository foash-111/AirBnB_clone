#!/usr/bin/python3
"""main module for base class
    """

import uuid
from datetime import datetime


class BaseModel:
    """main class for this projecta
    """

    def __init__(self):
        """constructor

        Args:
            id (__type__, str): generated by (uuid) & converted to str
            created_at (_type_, str): time obj created. Defaults to None.
            updated_at (_type_, str): time obj updated. Defaults to None.
        """
        self.id = str(uuid.uuid4())
        self.created_at = datetime.now()
        self.__str_creat_date = self.created_at.isoformat()

    def __str__(self):
        """string representation of an object"""
        return f"[{__class__.__name__}] ({self.id}) {self.__dict__}"

    def save(self):
        """updates the public instance attribute updated_at with the current datetime"""
        self.updated_at = datetime.now()
        self.__str_update_date = self.updated_at.isoformat()

    def to_dict(self):
        """returns a dictionary containing all keys/values of __dict__ of the instance
        """
        new_dict = {}
        for k, v in self.__dict__.items():
            if k == "self.created_at":
                new_dict[k] = self.__str_creat_date
            elif k == "updated_at":
                new_dict[k] = self.__str_update_date
            else:
                new_dict[k] = v
        dict_rep = {__class__.__name__: new_dict}

        return dict_rep
